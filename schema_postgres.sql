-- PostgreSQL schema for API Backbone
-- This schema matches the new SQLAlchemy models structure
-- Based on the provided PostgreSQL schema requirements

-- Drop existing objects if they exist (for clean setup)
-- DROP TRIGGER IF EXISTS trigger_check_manager_approval ON "Assets";
-- DROP TRIGGER IF EXISTS trigger_update_fraction_values ON "ValueHistory";
-- DROP FUNCTION IF EXISTS check_manager_approval();
-- DROP FUNCTION IF EXISTS calculate_fraction_value(INTEGER);
-- DROP FUNCTION IF EXISTS update_fraction_values();
-- DROP FUNCTION IF EXISTS initialize_fraction_values();

-- Drop tables in reverse dependency order
-- DROP TABLE IF EXISTS "ValueHistory" CASCADE;
DROP TABLE IF EXISTS "Transactions" CASCADE;
-- DROP TABLE IF EXISTS "Ownership" CASCADE;
DROP TABLE IF EXISTS "Fractions" CASCADE;
DROP TABLE IF EXISTS "Assets" CASCADE;
DROP TABLE IF EXISTS "Users" CASCADE;

-- Create Users table (matching new schema)
CREATE TABLE "Users" (
  user_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  user_name VARCHAR,
  created_at TIMESTAMP NOT NULL,
  is_manager BOOLEAN NOT NULL,
  password VARCHAR NOT NULL,
  email VARCHAR NOT NULL,
  is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);

-- Create Assets table (matching new schema)
CREATE TABLE "Assets" (
  asset_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  asset_name TEXT NOT NULL,
  total_unit BIGINT NOT NULL,
  unit_min BIGINT NOT NULL,
  unit_max BIGINT NOT NULL,
  total_value NUMERIC(18,2) NOT NULL
  created_at TIMESTAMP NOT NULL DEFAULT now()
);

-- Create Fractions table (matching new schema)
CREATE TABLE "Fractions" (
  fraction_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  asset_id BIGINT NOT NULL REFERENCES "Assets"(asset_id),
  owner_id BIGINT REFERENCES "Users"(user_id),
  parent_fraction_id BIGINT REFERENCES "Fractions"(fraction_id),
  units BIGINT NOT NULL,
  is_active BOOLEAN NOT NULL,
  created_at TIMESTAMP NOT NULL,
  value_perunit NUMERIC(18,2) NOT NULL
);

-- Create Transactions table (matching new schema)
CREATE TABLE "Transactions" (
  transaction_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  fraction_id BIGINT NOT NULL REFERENCES public."Fractions"(fraction_id),
  unit_moved BIGINT NOT NULL,
  transaction_type TEXT,
  transaction_at TIMESTAMP NOT NULL DEFAULT now(),
  from_owner_id BIGINT NOT NULL REFERENCES public."Users"(user_id),
  to_owner_id BIGINT NOT NULL REFERENCES public."Users"(user_id),
  offer_id BIGINT NOT NULL REFERENCES public."Offers"(offer_id),
  price_perunit NUMERIC(18,2) NOT NULL
);

-- Create AssetValueHistory table (new table for tracking asset value changes)
CREATE TABLE IF NOT EXISTS "AssetValueHistory" (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  asset_id BIGINT NOT NULL REFERENCES "Assets"(asset_id),
  value NUMERIC(18,2) NOT NULL,
  recorded_at TIMESTAMP NOT NULL DEFAULT now(),
  source TEXT DEFAULT 'system',
  adjusted_by BIGINT REFERENCES "Users"(user_id),
  adjustment_reason TEXT
);
CREATE INDEX IF NOT EXISTS idx_avh_asset_time ON "AssetValueHistory"(asset_id, recorded_at);

-- Create Offers table (for buy/sell offers)
CREATE TABLE "Offers" (
    offer_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asset_id BIGINT NOT NULL REFERENCES "Assets"(asset_id),
    fraction_id BIGINT REFERENCES "Fractions"(fraction_id),
    user_id BIGINT NOT NULL REFERENCES "Users"(user_id),
    is_buyer BOOLEAN NOT NULL,
    units BIGINT NOT NULL,
    create_at TIMESTAMP NOT NULL DEFAULT now(),
    price_perunit NUMERIC(18,2) NOT NULL
);
-- Indexes for Offers table
CREATE INDEX idx_offers_asset ON "Offers"(asset_id);
CREATE INDEX idx_offers_fraction ON "Offers"(fraction_id);
CREATE INDEX idx_offers_user ON "Offers"(user_id);
CREATE INDEX idx_offers_created_at ON "Offers"(create_at);

-- Create useful indexes for performance
CREATE INDEX idx_assets_name ON "Assets"(asset_name);
CREATE INDEX idx_fractions_asset ON "Fractions"(asset_id);
CREATE INDEX idx_fractions_owner ON "Fractions"(owner_id);
CREATE INDEX idx_fractions_parent ON "Fractions"(parent_fraction_id);
CREATE INDEX idx_fractions_active ON "Fractions"(is_active);
CREATE INDEX idx_transactions_fraction ON "Transactions"(fraction_id);
CREATE INDEX idx_transactions_from_owner ON "Transactions"(from_owner_id);
CREATE INDEX idx_transactions_to_owner ON "Transactions"(to_owner_id);
CREATE INDEX idx_transactions_at ON "Transactions"(transaction_at);
CREATE INDEX idx_transactions_offer ON public."Transactions"(offer_id);
CREATE INDEX idx_users_email ON "Users"(email);
CREATE INDEX idx_users_manager ON "Users"(is_manager);

-- Display success message
\echo 'âœ… PostgreSQL schema created successfully!'
\echo '   - Tables created with proper relationships'
\echo '   - Indexes created for performance'
\echo '   - Schema matches new SQLAlchemy models'