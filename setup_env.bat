@echo off
setlocal enabledelayedexpansion

REM Flask API Backbone - Environment Setup Script for Windows
REM =========================================================
REM This script sets up the development environment:
REM - Creates virtual environment
REM - Installs dependencies from requirements.txt
REM - Creates .env file with database configuration

REM Function to print colored output
:print_status
echo [INFO] %~1
goto :eof

:print_success
echo [SUCCESS] %~1
goto :eof

:print_warning
echo [WARNING] %~1
goto :eof

:print_error
echo [ERROR] %~1
goto :eof

REM Function to check if command exists
:command_exists
where "%~1" >nul 2>&1
if %errorlevel% equ 0 (
    set "%~2=1"
) else (
    set "%~2=0"
)
goto :eof

REM Function to check Python version
:check_python_version
call :print_status "Checking Python installation..."

REM Check for Python 3 first, then Python
python --version >nul 2>&1
if %errorlevel% equ 0 (
    set PYTHON_CMD=python
) else (
    call :print_error "Python is not installed or not in PATH"
    exit /b 1
)

REM Get Python version
for /f "tokens=2" %%i in ('!PYTHON_CMD! --version 2^>^&1') do set PYTHON_VERSION=%%i

REM Extract major and minor version numbers
for /f "tokens=1,2 delims=." %%a in ("!PYTHON_VERSION!") do (
    set PYTHON_MAJOR=%%a
    set PYTHON_MINOR=%%b
)

REM Check if Python version is 3.8 or higher
if !PYTHON_MAJOR! lss 3 (
    call :print_error "Python 3.8+ is required. Found: !PYTHON_VERSION!"
    exit /b 1
)

if !PYTHON_MAJOR! equ 3 (
    if !PYTHON_MINOR! lss 8 (
        call :print_error "Python 3.8+ is required. Found: !PYTHON_VERSION!"
        exit /b 1
    )
)

call :print_success "Python version check passed: !PYTHON_VERSION!"
goto :eof

REM Function to create virtual environment
:create_venv
call :print_status "Creating virtual environment..."

if exist "venv" (
    call :print_warning "Virtual environment already exists. Removing old one..."
    rmdir /s /q venv
)

!PYTHON_CMD! -m venv venv
if %errorlevel% equ 0 (
    call :print_success "Virtual environment created successfully"
) else (
    call :print_error "Failed to create virtual environment"
    exit /b 1
)
goto :eof

REM Function to activate virtual environment and install dependencies
:install_dependencies
call :print_status "Activating virtual environment and installing dependencies..."

REM Activate virtual environment
call venv\Scripts\activate.bat

REM Upgrade pip
call :print_status "Upgrading pip..."
python -m pip install --upgrade pip

REM Install dependencies
call :print_status "Installing dependencies from requirements.txt..."
pip install -r requirements.txt
if %errorlevel% equ 0 (
    call :print_success "Dependencies installed successfully"
) else (
    call :print_error "Failed to install dependencies"
    exit /b 1
)
goto :eof

REM Function to setup environment file
:setup_env_file
call :print_status "Setting up environment configuration..."

if exist ".env" (
    call :print_warning ".env file already exists. Backing up to .env.backup"
    copy .env .env.backup >nul
)

REM Get database configuration from user
call :print_status "Configuring database settings..."

REM Default values
set DB_HOST=localhost
set DB_PORT=5432
set DB_NAME=provision_it_v2
set DB_USER=username
set DB_PASSWORD=password

REM Get database host
set /p "input_host=Database host [%DB_HOST%]: "
if not "!input_host!"=="" set DB_HOST=!input_host!

REM Get database port
set /p "input_port=Database port [%DB_PORT%]: "
if not "!input_port!"=="" set DB_PORT=!input_port!

REM Get database name
set /p "input_name=Database name [%DB_NAME%]: "
if not "!input_name!"=="" set DB_NAME=!input_name!

REM Get database user
set /p "input_user=Database user [%DB_USER%]: "
if not "!input_user!"=="" set DB_USER=!input_user!

REM Get database password
set /p "input_password=Database password: "
if not "!input_password!"=="" set DB_PASSWORD=!input_password!

REM Generate secret key
python -c "import secrets; print(secrets.token_hex(32))" > temp_secret.txt 2>nul
if exist temp_secret.txt (
    set /p SECRET_KEY=<temp_secret.txt
    del temp_secret.txt
) else (
    set SECRET_KEY=dev-secret-key-change-in-production
)

REM Create .env file
echo # Flask API Backbone - Environment Configuration > .env
echo # ============================================== >> .env
echo # Generated by setup script on %date% %time% >> .env
echo. >> .env
echo # Flask Configuration >> .env
echo FLASK_ENV=development >> .env
echo FLASK_DEBUG=true >> .env
echo FLASK_HOST=127.0.0.1 >> .env
echo FLASK_PORT=5000 >> .env
echo. >> .env
echo # Security >> .env
echo SECRET_KEY=!SECRET_KEY! >> .env
echo. >> .env
echo # Database Configuration >> .env
echo DATABASE_URL=postgresql://!DB_USER!:!DB_PASSWORD!@!DB_HOST!:!DB_PORT!/!DB_NAME! >> .env
echo. >> .env
echo # For testing (optional) >> .env
echo TEST_DATABASE_URL=postgresql://!DB_USER!:!DB_PASSWORD!@!DB_HOST!:!DB_PORT!/!DB_NAME!_test >> .env

call :print_success ".env file created with database configuration"
call :print_status "Database URL: postgresql://!DB_USER!:***@!DB_HOST!:!DB_PORT!/!DB_NAME!"
goto :eof

REM Function to check database connection
:check_database
call :print_status "Checking database configuration..."

if exist ".env" (
    REM Extract database info from .env file
    for /f "tokens=2 delims==" %%a in ('findstr "DATABASE_URL" .env') do set DATABASE_URL=%%a
    
    if "!DATABASE_URL!"=="" (
        call :print_warning "DATABASE_URL not set in .env file"
        goto :eof
    )
    
    REM Parse database URL (simplified parsing for Windows)
    for /f "tokens=4,6,7 delims=:/@" %%a in ("!DATABASE_URL!") do (
        set DB_HOST=%%a
        set DB_PORT=%%b
        set DB_NAME=%%c
    )
    
    call :print_status "Database configuration found:"
    call :print_status "  Host: !DB_HOST!"
    call :print_status "  Port: !DB_PORT!"
    call :print_status "  Database: !DB_NAME!"
    
    REM Check if PostgreSQL is accessible
    call :command_exists psql PSQL_EXISTS
    if !PSQL_EXISTS! equ 1 (
        call :print_status "Testing database connection..."
        psql "!DATABASE_URL!" -c "SELECT 1;" >nul 2>&1
        if !errorlevel! equ 0 (
            call :print_success "Database connection successful"
        ) else (
            call :print_warning "Database connection failed. Please check your configuration."
        )
    ) else (
        call :print_warning "psql not found. Cannot test database connection."
    )
) else (
    call :print_warning ".env file not found. Please configure database settings."
)
goto :eof

REM Function to show final instructions
:show_final_instructions
echo.
echo ==========================================
call :print_success "Environment setup completed successfully!"
echo ==========================================
echo.
call :print_status "Next steps:"
echo 1. Create PostgreSQL database: createdb provision_it_v2
echo 2. Initialize schema: psql -h localhost -U username -d provision_it_v2 -f schema_postgres.sql
echo 3. Import data: psql -h localhost -U username -d provision_it_v2 -f import_postgres.sql
echo 4. Activate virtual environment: venv\Scripts\activate.bat
echo 5. Run the application: python run.py
echo.
call :print_status "Available database commands:"
echo   createdb provision_it_v2                                     - Create database
echo   psql -h localhost -U username -d provision_it_v2 -f schema_postgres.sql - Initialize schema
echo   psql -h localhost -U username -d provision_it_v2 -f import_postgres.sql  - Import data
echo.
call :print_status "Health check endpoints (after running the app):"
echo   http://localhost:5000/health
echo   http://localhost:5000/health/db
echo   http://localhost:5000/health/detailed
echo.
goto :eof

REM Main setup function
:main
echo ðŸš€ Flask API Backbone - Environment Setup
echo ==========================================
echo.

REM Check Python version
call :check_python_version
if %errorlevel% neq 0 exit /b 1

REM Create virtual environment
call :create_venv
if %errorlevel% neq 0 exit /b 1

REM Install dependencies
call :install_dependencies
if %errorlevel% neq 0 exit /b 1

REM Setup environment file
call :setup_env_file
if %errorlevel% neq 0 exit /b 1

REM Check database configuration
call :check_database

REM Show final instructions
call :show_final_instructions

goto :eof

REM Run main function
call :main