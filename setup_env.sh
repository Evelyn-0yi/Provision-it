#!/bin/bash

# Flask API Backbone - Environment Setup Script for Unix/Linux
# ============================================================
# This script sets up the development environment:
# - Creates virtual environment
# - Installs dependencies from requirements.txt
# - Creates .env file with database configuration

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Python version
check_python_version() {
    if command_exists python3; then
        PYTHON_CMD="python3"
    elif command_exists python; then
        PYTHON_CMD="python"
    else
        print_error "Python is not installed or not in PATH"
        exit 1
    fi
    
    # Check Python version
    PYTHON_VERSION=$($PYTHON_CMD --version 2>&1 | cut -d' ' -f2)
    PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d'.' -f1)
    PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f2)
    
    if [ "$PYTHON_MAJOR" -lt 3 ] || ([ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -lt 8 ]); then
        print_error "Python 3.8+ is required. Found: $PYTHON_VERSION"
        exit 1
    fi
    
    print_success "Python version check passed: $PYTHON_VERSION"
}

# Function to create virtual environment
create_venv() {
    print_status "Creating virtual environment..."
    
    if [ -d "venv" ]; then
        print_warning "Virtual environment already exists. Removing old one..."
        rm -rf venv
    fi
    
    $PYTHON_CMD -m venv venv
    print_success "Virtual environment created successfully"
}

# Function to activate virtual environment and install dependencies
install_dependencies() {
    print_status "Activating virtual environment and installing dependencies..."
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Upgrade pip
    print_status "Upgrading pip..."
    pip install --upgrade pip
    
    # Install dependencies
    print_status "Installing dependencies from requirements.txt..."
    pip install -r requirements.txt
    
    print_success "Dependencies installed successfully"
}

# Function to setup environment file
setup_env_file() {
    print_status "Setting up environment configuration..."
    
    if [ -f ".env" ]; then
        print_warning ".env file already exists. Backing up to .env.backup"
        cp .env .env.backup
    fi
    
    # Get database configuration from user
    print_status "Configuring database settings..."
    
    # Default values
    DB_HOST="localhost"
    DB_PORT="5432"
    DB_NAME="provision_it_v2"
    DB_USER="username"
    DB_PASSWORD="password"
    
    # Get database host
    read -p "Database host [$DB_HOST]: " input_host
    DB_HOST=${input_host:-$DB_HOST}
    
    # Get database port
    read -p "Database port [$DB_PORT]: " input_port
    DB_PORT=${input_port:-$DB_PORT}
    
    # Get database name
    read -p "Database name [$DB_NAME]: " input_name
    DB_NAME=${input_name:-$DB_NAME}
    
    # Get database user
    read -p "Database user [$DB_USER]: " input_user
    DB_USER=${input_user:-$DB_USER}
    
    # Get database password
    read -s -p "Database password: " input_password
    echo
    DB_PASSWORD=${input_password:-"$DB_PASSWORD"}
    
    # Generate secret key
    SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_hex(32))" 2>/dev/null || echo "dev-secret-key-change-in-production")
    
    # Create .env file
    cat > .env << EOF
# Flask API Backbone - Environment Configuration
# ==============================================
# Generated by setup script on $(date)

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=true
FLASK_HOST=127.0.0.1
FLASK_PORT=5000

# Security
SECRET_KEY=$SECRET_KEY

# Database Configuration
DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME

# For testing (optional)
TEST_DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/${DB_NAME}_test
EOF
    
    print_success ".env file created with database configuration"
    print_status "Database URL: postgresql://$DB_USER:***@$DB_HOST:$DB_PORT/$DB_NAME"
}

# Function to check database connection
check_database() {
    print_status "Checking database configuration..."
    
    if [ -f ".env" ]; then
        # Source the .env file to get DATABASE_URL
        source .env
        
        if [ -z "$DATABASE_URL" ]; then
            print_warning "DATABASE_URL not set in .env file"
            return
        fi
        
        # Extract database info from URL
        DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
        DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
        DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*\/\([^?]*\).*/\1/p')
        
        print_status "Database configuration found:"
        print_status "  Host: $DB_HOST"
        print_status "  Port: $DB_PORT"
        print_status "  Database: $DB_NAME"
        
        # Check if PostgreSQL is accessible
        if command_exists psql; then
            print_status "Testing database connection..."
            if psql "$DATABASE_URL" -c "SELECT 1;" >/dev/null 2>&1; then
                print_success "Database connection successful"
            else
                print_warning "Database connection failed. Please check your configuration."
            fi
        else
            print_warning "psql not found. Cannot test database connection."
        fi
    else
        print_warning ".env file not found. Please configure database settings."
    fi
}

# Function to show final instructions
show_final_instructions() {
    echo
    echo "=========================================="
    print_success "Environment setup completed successfully!"
    echo "=========================================="
    echo
    print_status "Next steps:"
    echo "1. Create PostgreSQL database: createdb provision_it"
    echo "2. Initialize schema: psql -h localhost -U username -d provision_it -f schema_postgres.sql"
    echo "3. Import data: psql -h localhost -U robertwang -d provision_it -f import_postgres.sql"
    echo "4. Activate virtual environment: source venv/bin/activate"
    echo "5. Run the application: python run.py"
    echo
    print_status "Available database commands:"
    echo "  createdb provision_it                                    - Create database"
    echo "  psql -h localhost -U robertwang -d provision_it -f schema_postgres.sql - Initialize schema"
    echo "  psql -h localhost -U robertwang -d provision_it -f import_postgres.sql  - Import data"
    echo
    print_status "Health check endpoints (after running the app):"
    echo "  http://localhost:5000/health"
    echo "  http://localhost:5000/health/db"
    echo "  http://localhost:5000/health/detailed"
    echo
}

# Main setup function
main() {
    echo "ðŸš€ Flask API Backbone - Environment Setup"
    echo "=========================================="
    echo
    
    # Check Python version
    check_python_version
    
    # Create virtual environment
    create_venv
    
    # Install dependencies
    install_dependencies
    
    # Setup environment file
    setup_env_file
    
    # Check database configuration
    check_database
    
    # Show final instructions
    show_final_instructions
}

# Run main function
main "$@"